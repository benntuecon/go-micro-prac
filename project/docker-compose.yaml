version: '3'

services:

  broker:
    build: 
      context: ./../broker-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      postgres:
        condition: service_healthy

  logger:
    build: 
      context: ./../logger-service
      dockerfile: Dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      mongo:
        condition: service_healthy
  
  authentication:
    build: 
      context: ./../authentication
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8081:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=postgres dbname=users sslmode=disable TimeZone=UTC connect_timeout=5"
    depends_on:
      postgres:
        condition: service_healthy

  web:
    build:
      context: ./../react-frontend
      dockerfile: Dockerfile
    
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - /app/node_modules
      - ./../react-frontend:/app
  postgres:
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    
  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=logs
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      - ./db-data/mongo/:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
